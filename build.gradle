buildscript {
  repositories {
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    mavenCentral()
  }
}

// Apply plugins
plugins {
  id 'maven-publish'
  id 'publishing'
  id 'signing'
  id 'java'
  id 'groovy'
  id 'idea'
  id 'eclipse'
  id 'application'
}

// TODO convert
// https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:complete_example

dependencies {
  implementation group: 'org.jruby', name: 'jruby-complete', version: '9.2.17.0'
  
  implementation 'org.jboss.weld:weld-core-impl:4.0.1.Final'
  // compile "com.zaxxer:HikariCP:1.3.8"
  implementation "org.yaml:snakeyaml:1.28"
  implementation "io.undertow:undertow-core:2.2.7.Final"
  implementation "io.undertow:undertow-servlet:2.2.7.Final"
  implementation "org.quartz-scheduler:quartz:2.2.3"
  implementation "org.jboss.weld.se:weld-se-core:4.0.1.Final"
  implementation "org.jruby.rack:jruby-rack:1.1.21"
  implementation "org.stokesdrift:accretion:0.0.1-SNAPSHOT"
  implementation "jakarta.enterprise:jakarta.enterprise.cdi-api:3.0.0"

  testImplementation 'org.powermock:powermock-mockito-release-full:1.6.4'
  testImplementation 'junit:junit:4.13.2'

}

application {
  mainClass = 'org.stokesdrift.Server'
}

// loadProperties("${System.getProperty('user.home')}/gradle.properties")

defaultTasks = ['assemble', 'copyDependsLibs', 'copyRequireFile']

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

repositories {
  mavenLocal()
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
  mavenCentral()
}

sourceSets {
  main {
    // compileClasspath = runtimeClasspath
    resources.srcDirs = ['src/main/ruby', 'src/main/resources']
  }
}

compileJava {
  options.release = 11
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

test.doFirst {
    copy {
        from 'build/resources/main/META-INF/beans.xml'
        into 'build/classes/main/META-INF/'
    }
    copy {
        from 'build/resources/test/META-INF/beans.xml'
        into 'build/classes/test/META-INF/'
    }
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("publishing") }
    sign configurations.archives
}

eclipse {
  classpath {
    defaultOutputDir = file('build/classes')
  }
}

/*task cleanLibs << {
  new File('lib').delete()
}*/

import org.apache.tools.ant.filters.*

task copyRequireFile(type: Copy) {
  destinationDir = new File('lib')
  from "src/main/ruby"
  include 'stokesdrift.rb'
  filter(ConcatFilter, prepend: file('src/include/header.txt'))
}

task copyDependsLibs(type: Copy) {
  dependsOn(jar)
  destinationDir = new File('lib')
  from "build/libs"
  from configurations.runtimeClasspath
  from "src/main/ruby"
}

publishing {

  publications {
    driftserver(MavenPublication) {
      pom {
        groupId "${group}"
        artifactId "${archivesBaseName}"   
        version "${version}"
        from components.java
        
        name = 'Stokes Drift Server'
        packaging = 'jar'
        description = 'Java ruby rack server'

        url = "http://www.stokesdrift.com"
        
        licenses {
          license {
            name = 'MIT License'
            url = 'http://www.opensource.org/licenses/mit-license.php'
          }
        }

        developers {
          developer {
            id = 'driedtoast'
            name = 'Daniel Marchant'
            email = 'driedtoast@gmail.com'
          }
        }          
                  
        scm {
          connection = 'scm:git:git@github.com:stokesdrift/stokesdrift.git'
          developerConnection = 'scm:git:git@github.com:stokesdrift/stokesdrift.git'
          url = 'git@github.com:stokesdrift/stokesdrift.git'
        } 
      }
    }
  }

  repositories {
    maven {
        def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
        def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
    }
    maven {
      url = "https://oss.sonatype.org/content/repositories/snapshots/" 
      mavenContent {
        snapshotsOnly()
      }

      credentials {
        username "${ossrhUsername}" 
        password "${ossrhPassword}"
      } 
    }
    
    maven {
      url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/" 
      mavenContent {
        releasesOnly()
      }

      credentials {
        username "${ossrhUsername}" 
        password "${ossrhPassword}"
      } 
    }

  }


}
